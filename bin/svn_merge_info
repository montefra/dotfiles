#!/bin/bash
# loop through all the branches and runs
# svn mergeinfo $branch
# svn mergeinfo --show-revs eligible $branch

function show_help {
cat << EOF
Usage:
    ${0##*/} [-hl]

Loop through the branches and for each one print the svn merge infos
and which commits are still to be merged.
If no branch name to search is provided, '^/branches' is used.

    -h
        print this help
    -l
        show also the merge tree
EOF
}

# show the svn merge tree
long_merge=false

while getopts "hl" opt
do
  case "$opt" in
    h) show_help
       exit 0 ;;
    l) long_merge=true ;;
    '?') show_help
         exit 1 ;;
  esac
done

# get rid of the optional arguments
shift $((OPTIND-1))

if [ $# -ge 1 ]
then
    branches="$1"
else
    branches="^/branches"
fi

for b in `svn ls $branches`
do
    branch="$branches/$b"
    echo -e "\e[96m===== START: $branch =====\e[0m"
    if [ "$long_merge" == "true" ]
    then
        svn mergeinfo $branch
    fi
    commits=`svn mergeinfo --show-revs eligible $branch`
    if [ x"$commits" = x ]
    then
        echo -e "\e[32mThe branch is fully merged\e[0m"
    else
        echo -e "\e[91mThe following commits in the branch are not yet merged: \e[1m${commits//$'\n'/ }\e[0m"
        pending_commits=`svn mergeinfo --show-revs eligible ^/trunk $branch`
        if [ x"$pending_commits" = x ]
        then
            echo -e "\e[32mAll commits from the ^/trunk are present in the branch"
        else
            echo -e "\e[91mThe ^/trunk is ahead of the branch: \e[1m${commits//$'\n'/ }\e[0m"
            echo -e "\e[91mSwitch to the branch and merge the trunk commits before merging the branch back into the trunk\e[0m"
        fi
    fi
    echo -e "\e[36m===== FINISH: $branch =====\e[0m"
done
