#!/bin/bash
# upgrade packages in .local and in the virtualenvs installed via
# ``virtualenvwrapper``
#
# usage: pipupgrade
#
# Copyright (C) 2015 Francesco Montesano <franz.bergesund@gmail.com>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


tmpfile=`mktemp --suffix .pip`

# list the packages to update. Filters out any line starting with Some or Could
# \param $1: name of the pip code to use
# \return: list of packages to be upgraded
function get_toupdate(){
  $1 list -l -o 2>/dev/null >$tmpfile
  if [ $? -eq 0 ]
  then
    to_up=`awk '{print $1}' $tmpfile`
    to_up=${to_up//Could}  # remove Could
    to_up=${to_up//Some}  # remove Some
    to_up=${to_up//You}  # remove Some
    to_up=${to_up//Package}  # remove Package
    to_up=${to_up//-}  # remove -----

    echo $to_up
  else
    >&2 echo -e "\e[1;31m'$1 list -l -o' failed with error $?.\e[0m"
    echo ""
  fi
}

# check if the package is installed in .local/lib
# \param $1: name of the pip code to use
# \param $2: name of the package
# \return: true, if the package is local, false otherwise
function is_local(){
  loc=`$1 show $2 | awk '$1~"Location:" {print $2}'`
  if [[ "$loc" = *local/lib* ]]
  then
    echo true
  else
    echo false
  fi
}

# check if the exit code 0 or not
# \param $1: error code
# \param $2: name of the package
function checkexit(){
  if [ $1 -eq 0 ]
  then
    echo -e "Upgrade of $2: \e[1;32msuccess\e[0m"
  else
    echo -e "Upgrade of $2: \e[1;31mfail. Check the log files'\e[0m"
  fi
}

# upgrade the package in .local
# \param $1: mane of pip code to use
# \param $2: package to update
# \param $3: log file name
function update_local(){
  is_l=`is_local $1 $2`
  if [ $is_l = true ]
  then
    echo $2
    $1 install -U --user $2 >> $3
    checkexit $? $2
  else
    echo To upgrade $2 first re-install it by hand using --user
  fi
}

# upgrade the package in a virtualenv
# \param $1: mane of pip code to use
# \param $2: package to update
# \param $3: log file name
function update_venv(){
  echo $2
  $1 install -U $2 >> $3
  checkexit $? $2
}

# upgrade all the packages
# \param $1: name of pip code to use
# \param $2: logfile
# \param $3: env_name name of the environment, optional
function update(){

  if [ $# -eq 2 ]
  then
    echo Upgrading local packages with $1
    isenv=false
  else
    echo Upgrading packages in environment $3
    isenv=true
  fi

  to_up=`get_toupdate $1`
  echo $to_up
  for tu in $to_up
  do
    if [ $isenv = true ]
    then
      update_venv $1 $tu $2
    else
      update_local $1 $tu $2
    fi
  done
}

# if we are in a virtual env, abort
if [ $VIRTUAL_ENV ]
then
  >&2 echo "The script does not work properly when launched from a virtual environment"
  exit 5
fi

# log directory
pipdir=$HOME/.pip
mkdir $pipdir 2>/dev/null

# update local packages
log2=$pipdir/pip2_upgrade.log
log3=$pipdir/pip3_upgrade.log

echo Clear old log files
cat /dev/null > $log2
cat /dev/null > $log3

update pip2 $log2
echo ====================
update pip3 $log3

# update the virtual environments managed with virtualenvwrapper
# enable workon
virtualenvwrapper_sh=$HOME/.local/bin/virtualenvwrapper.sh
if [ -e $virtualenvwrapper_sh ]
then
    source $virtualenvwrapper_sh
    venvs=`workon 2>/dev/null`
    if [ $? -lt 1 ]
    then
        >&2 echo "[ERROR] 'workon' not found, is 'wirtualenvwrapper' installed?"
    else
    for v in $venvs
    do
        echo ====================
        # create the log file
        logf=$pipdir/pip${v}_upgrade.log
        cat /dev/null > $logf
        # build the name of pip command
        pipv=$WORKON_HOME/${v}/bin/pip
        update $pipv $logf $v
    done
    fi
else
    echo "virtualenvwrapper not installed, nothing to do"
fi

# update the pyenvs
if [ -n "$PYENV_ROOT" -a -d "$PYENV_ROOT" ]
then
    for v in `pyenv versions --skip-aliases --bare`
    do
        echo ====================
        # create the log file
        logf=$pipdir/pip_${v}_upgrade.log
        cat /dev/null > $logf
        # build the name of pip command
        pipv=$PYENV_ROOT/versions/$v/bin/pip
        update $pipv $logf $v
    done
else
    echo "Pyenv not installed, nothing to do"
fi
